{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/keyboard-dd970efc.js"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","previousVisualViewport","currentVisualViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft"],"mappings":"yJAAA,ojBAAIA,EAAoB,qBACpBC,EAAqB,qBAErBC,EAAyB,GACzBC,EAAwB,GACxBC,GAAe,EAKfC,EAAsB,SAASA,sBACjCH,EAAyB,GACzBC,EAAwB,GACxBC,GAAe,GAGbE,EAAsB,SAASA,oBAAoBC,GACrDC,EAAqBD,GAEhBA,EAAIE,iBAITN,EAAwBO,EAAmBH,EAAIE,gBAE/CF,EAAIE,eAAeE,SAAW,WAC5BC,EAAqBL,GAEjBM,KAAqBC,EAAkBP,GACzCQ,EAAgBR,GACPS,EAAiBT,IAC1BU,EAAiBV,MAWnBC,EAAuB,SAASA,qBAAqBD,GACvDA,EAAIW,iBAAiB,mBAAmB,SAAUC,GAChD,OAAOJ,EAAgBR,EAAKY,MAE9BZ,EAAIW,iBAAiB,mBAAmB,WACtC,OAAOD,EAAiBV,OAIxBQ,EAAkB,SAASA,gBAAgBR,EAAKY,GAClDC,EAAsBb,EAAKY,GAC3Bf,GAAe,GAGba,EAAmB,SAASA,iBAAiBV,GAC/Cc,EAAuBd,GACvBH,GAAe,GAgBbS,EAAkB,SAASA,kBAC7B,IAAIS,GAA0BpB,EAAuBqB,OAASpB,EAAsBoB,QAAUpB,EAAsBqB,MACpH,OAAQpB,GAAgBF,EAAuBuB,QAAUtB,EAAsBsB,OAASH,EA1EjE,KAkFrBR,EAAoB,SAASA,kBAAkBP,GACjD,OAAOH,IAAiBY,EAAiBT,IAUvCS,EAAmB,SAASA,iBAAiBT,GAC/C,OAAOH,GAAgBD,EAAsBoB,SAAWhB,EAAImB,aAO1DN,EAAwB,SAASA,sBAAsBb,EAAKoB,GAC9D,IAAIC,EAAiBD,EAAWA,EAASC,eAAiBrB,EAAImB,YAAcvB,EAAsBoB,OAC9FJ,EAAK,IAAIU,YAAY7B,EAAmB,CAC1C8B,OAAQ,CACNF,eAAgBA,KAGpBrB,EAAIwB,cAAcZ,IAOhBE,EAAyB,SAASA,uBAAuBd,GAC3D,IAAIY,EAAK,IAAIU,YAAY5B,GACzBM,EAAIwB,cAAcZ,IAUhBP,EAAuB,SAASA,qBAAqBL,GACvDL,EAAyB8B,OAAOC,OAAO,GAAI9B,GAC3CA,EAAwBO,EAAmBH,EAAIE,iBAQ7CC,EAAqB,SAASA,mBAAmBD,GACnD,MAAO,CACLgB,MAAOS,KAAKC,MAAM1B,EAAegB,OACjCF,OAAQW,KAAKC,MAAM1B,EAAec,QAClCa,UAAW3B,EAAe2B,UAC1BC,WAAY5B,EAAe4B,WAC3BC,QAAS7B,EAAe6B,QACxBC,SAAU9B,EAAe8B,SACzBf,MAAOf,EAAee","file":"static/js/51.9936d7ad.chunk.js","sourcesContent":["var KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nvar KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nvar KEYBOARD_THRESHOLD = 150;\nvar previousVisualViewport = {};\nvar currentVisualViewport = {};\nvar keyboardOpen = false;\n/**\n * This is only used for tests\n */\n\nvar resetKeyboardAssist = function resetKeyboardAssist() {\n  previousVisualViewport = {};\n  currentVisualViewport = {};\n  keyboardOpen = false;\n};\n\nvar startKeyboardAssist = function startKeyboardAssist(win) {\n  startNativeListeners(win);\n\n  if (!win.visualViewport) {\n    return;\n  }\n\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n\n  win.visualViewport.onresize = function () {\n    trackViewportChanges(win);\n\n    if (keyboardDidOpen() || keyboardDidResize(win)) {\n      setKeyboardOpen(win);\n    } else if (keyboardDidClose(win)) {\n      setKeyboardClose(win);\n    }\n  };\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\n\n\nvar startNativeListeners = function startNativeListeners(win) {\n  win.addEventListener('keyboardDidShow', function (ev) {\n    return setKeyboardOpen(win, ev);\n  });\n  win.addEventListener('keyboardDidHide', function () {\n    return setKeyboardClose(win);\n  });\n};\n\nvar setKeyboardOpen = function setKeyboardOpen(win, ev) {\n  fireKeyboardOpenEvent(win, ev);\n  keyboardOpen = true;\n};\n\nvar setKeyboardClose = function setKeyboardClose(win) {\n  fireKeyboardCloseEvent(win);\n  keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accommodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\n\n\nvar keyboardDidOpen = function keyboardDidOpen() {\n  var scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n  return !keyboardOpen && previousVisualViewport.width === currentVisualViewport.width && scaledHeightDifference > KEYBOARD_THRESHOLD;\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\n\n\nvar keyboardDidResize = function keyboardDidResize(win) {\n  return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\n\n\nvar keyboardDidClose = function keyboardDidClose(win) {\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Dispatch a keyboard open event\n */\n\n\nvar fireKeyboardOpenEvent = function fireKeyboardOpenEvent(win, nativeEv) {\n  var keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n  var ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n    detail: {\n      keyboardHeight: keyboardHeight\n    }\n  });\n  win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\n\n\nvar fireKeyboardCloseEvent = function fireKeyboardCloseEvent(win) {\n  var ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n  win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\n\n\nvar trackViewportChanges = function trackViewportChanges(win) {\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\n\n\nvar copyVisualViewport = function copyVisualViewport(visualViewport) {\n  return {\n    width: Math.round(visualViewport.width),\n    height: Math.round(visualViewport.height),\n    offsetTop: visualViewport.offsetTop,\n    offsetLeft: visualViewport.offsetLeft,\n    pageTop: visualViewport.pageTop,\n    pageLeft: visualViewport.pageLeft,\n    scale: visualViewport.scale\n  };\n};\n\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };"],"sourceRoot":""}